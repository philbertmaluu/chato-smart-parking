"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { DataTable, type TableColumn } from "@/components/ui/table";
import { useCustomerAccounts, type Account, type CreateCustomerAccountData, type UpdateCustomerAccountData, type Vehicle } from "@/hooks/use-customer-accounts";
import { useVehicles } from "@/hooks/use-vehicles";
import { Plus, Search, Edit, Trash2, Car, MoreHorizontal } from "lucide-react";
import { toast } from "sonner";
import { formatDate } from "@/utils/date-utils";
import { formatCurrency } from "@/utils/currency-formater";

export function AccountsTable() {
  const {
    customerAccounts: accounts,
    loading,
    error,
    pagination,
    fetchCustomerAccounts: fetchAccounts,
    createCustomerAccount: createAccount,
    updateCustomerAccount: updateAccount,
    deleteCustomerAccount: deleteAccount,
    toggleAccountStatus,
    addVehicleToAccount,
    removeVehicleFromAccount,
    getAccountVehicles,
    handlePageChange,
  } = useCustomerAccounts();

  const { vehicles, fetchVehicles } = useVehicles();

  const [searchTerm, setSearchTerm] = useState("");
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [selectedAccount, setSelectedAccount] = useState<Account | null>(null);

  // Form states
  const [formData, setFormData] = useState<CreateCustomerAccountData>({
    username: "",
    email: "",
    phone: "",
    address: "",
    gender: "male",
    date_of_birth: "",
    customer_number: "",
    name: "",
    company_name: "",
    customer_type: "individual",
    account_number: "", // Will be auto-generated by backend
    account_name: "",
    account_type: "prepaid",
    initial_balance: 0,
    credit_limit: 0,
  });

  // Vehicle management states
  const [isVehicleDialogOpen, setIsVehicleDialogOpen] = useState(false);
  const [selectedVehicleAccount, setSelectedVehicleAccount] = useState<Account | null>(null);
  const [vehicleFormData, setVehicleFormData] = useState({
    vehicle_id: 0,
    is_primary: false,
  });

  useEffect(() => {
    fetchAccounts();
    fetchVehicles();
  }, []);

  // Auto-sync username with customer name and account name
  const handleUsernameChange = (username: string) => {
    setFormData({
      ...formData,
      username,
      name: username, // Customer name equals username
      account_name: username, // Account name equals username
    });
  };

  const handleCreateAccount = async () => {
    try {
      await createAccount(formData);
      setIsCreateDialogOpen(false);
      setFormData({
        username: "",
        email: "",
        phone: "",
        address: "",
        gender: "male",
        date_of_birth: "",
        customer_number: "",
        name: "",
        company_name: "",
        customer_type: "individual",
        account_number: "", // Auto-generated by backend
        account_name: "",
        account_type: "prepaid",
        initial_balance: 0,
        credit_limit: 0,
      });
      toast.success("Account created successfully");
    } catch (error) {
      toast.error("Failed to create account");
    }
  };

  const handleEditAccount = async () => {
    if (!selectedAccount) return;

    try {
      await updateAccount({
        id: selectedAccount.id,
        ...formData,
      });
      setIsEditDialogOpen(false);
      setSelectedAccount(null);
      toast.success("Account updated successfully");
    } catch (error) {
      toast.error("Failed to update account");
    }
  };

  const handleDeleteAccount = async (id: number) => {
    try {
      await deleteAccount(id);
      toast.success("Account deleted successfully");
    } catch (error) {
      toast.error("Failed to delete account");
    }
  };

  const handleToggleStatus = async (account: Account) => {
    try {
      await toggleAccountStatus(account.id);
      toast.success(`Account ${account.is_active ? "deactivated" : "activated"} successfully`);
    } catch (error) {
      toast.error("Failed to toggle account status");
    }
  };

  const openEditDialog = (account: Account) => {
    setSelectedAccount(account);
    setFormData({
      username: account.customer?.user?.username || "",
      email: account.customer?.user?.email || "",
      phone: account.customer?.user?.phone || "",
      address: account.customer?.user?.address || "",
      gender: account.customer?.user?.gender || "male",
      date_of_birth: account.customer?.user?.date_of_birth || "",
      customer_number: account.customer?.customer_number || "",
      name: account.customer?.name || "",
      company_name: account.customer?.company_name || "",
      customer_type: (account.customer?.customer_type as "individual" | "corporate") || "individual",
      account_number: account.account_number,
      account_name: account.name,
      account_type: account.account_type,
      initial_balance: account.balance,
      credit_limit: account.credit_limit,
    });
    setIsEditDialogOpen(true);
  };


  const openVehicleDialog = (account: Account) => {
    setSelectedVehicleAccount(account);
    setVehicleFormData({
      vehicle_id: 0,
      is_primary: false,
    });
    setIsVehicleDialogOpen(true);
  };

  const handleAddVehicle = async () => {
    if (!selectedVehicleAccount) return;

    try {
      await addVehicleToAccount(
        selectedVehicleAccount.id,
        vehicleFormData.vehicle_id,
        vehicleFormData.is_primary
      );
      setIsVehicleDialogOpen(false);
      setVehicleFormData({
        vehicle_id: 0,
        is_primary: false,
      });
      toast.success("Vehicle added to account successfully");
    } catch (error) {
      toast.error("Failed to add vehicle to account");
    }
  };

  const handleRemoveVehicle = async (accountId: number, vehicleId: number) => {
    try {
      await removeVehicleFromAccount(accountId, vehicleId);
      toast.success("Vehicle removed from account successfully");
    } catch (error) {
      toast.error("Failed to remove vehicle from account");
    }
  };

  const columns: TableColumn<Account>[] = [
    {
      key: "account_number",
      title: "Account Number",
      dataIndex: "account_number",
      searchable: true,
    },
    {
      key: "name",
      title: "Account Name",
      dataIndex: "name",
      searchable: true,
    },
    {
      key: "customer",
      title: "Customer",
      searchable: true,
      render: (_, record: Account) => {
        return record.customer ? (
          <div>
            <div className="font-medium">
              {record.customer.name}
            </div>
            <div className="text-sm text-muted-foreground">
              {record.customer.user?.email}
            </div>
            <div className="text-sm text-muted-foreground">
              {record.customer.user?.phone}
            </div>
          </div>
        ) : (
          <span className="text-muted-foreground">No customer</span>
        );
      },
    },
    {
      key: "account_type",
      title: "Type",
      dataIndex: "account_type",
      render: (_, record: Account) => {
        const type = record.account_type;
        return (
          <Badge variant={type === "prepaid" ? "default" : "secondary"}>
            {type === "prepaid" ? "Prepaid" : "Postpaid"}
          </Badge>
        );
      },
    },
    {
      key: "balance",
      title: "Balance",
      dataIndex: "balance",
      render: (_, record: Account) => {
        return formatCurrency(record.balance);
      },
    },
    {
      key: "credit_limit",
      title: "Credit Limit",
      dataIndex: "credit_limit",
      render: (_, record: Account) => {
        const limit = record.credit_limit;
        return limit > 0 ? formatCurrency(limit) : "-";
      },
    },
    {
      key: "is_active",
      title: "Status",
      dataIndex: "is_active",
      render: (value, record) => (
        <Switch
          checked={value}
          onCheckedChange={() => handleToggleStatus(record)}
          disabled={loading}
        />
      ),
    },
    {
      key: "vehicles",
      title: "Vehicles",
      render: (_, record: Account) => {
        const vehicleCount = record.account_vehicles?.length || 0;
        return (
          <div className="text-center">
            <div className="font-medium">{vehicleCount}</div>
            <div className="text-sm text-muted-foreground">
              {vehicleCount > 0 ? "vehicles" : "no vehicles"}
            </div>
          </div>
        );
      },
    },
   
    {
      key: "actions",
      title: "Actions",
      align: "right",
      render: (_, record: Account) => (
        <div className="flex justify-end">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="sm">
                <span className="sr-only">Open menu</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => openVehicleDialog(record)}>
                <Car className="mr-2 h-4 w-4" />
                Manage Vehicles
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => openEditDialog(record)}>
                <Edit className="mr-2 h-4 w-4" />
                Edit
              </DropdownMenuItem>
              <AlertDialog>
                <AlertDialogTrigger asChild>
                  <DropdownMenuItem onSelect={(e) => e.preventDefault()}>
                    <Trash2 className="mr-2 h-4 w-4" />
                    Delete
                  </DropdownMenuItem>
                </AlertDialogTrigger>
                <AlertDialogContent>
                  <AlertDialogHeader>
                    <AlertDialogTitle>Delete Account</AlertDialogTitle>
                    <AlertDialogDescription>
                      Are you sure you want to delete "{record.name}"? This
                      action cannot be undone.
                    </AlertDialogDescription>
                  </AlertDialogHeader>
                  <AlertDialogFooter>
                    <AlertDialogCancel>Cancel</AlertDialogCancel>
                    <AlertDialogAction
                      onClick={() => handleDeleteAccount(record.id)}
                      className="bg-red-600 hover:bg-red-700"
                    >
                      Delete
                    </AlertDialogAction>
                  </AlertDialogFooter>
                </AlertDialogContent>
              </AlertDialog>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      ),
    },
  ];

  if (error) {
    return (
      <Card>
        <CardContent className="pt-6">
          <div className="text-center text-destructive">
            <p>Error loading accounts: {error}</p>
            <Button onClick={() => fetchAccounts()} className="mt-4">
              Try Again
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      {/* Data Table */}
      <DataTable
        dataSource={accounts}
        columns={columns}
        loading={loading}
        pagination={{
          currentPage: pagination.current_page,
          total: pagination.total,
          perPage: pagination.per_page,
          lastPage: pagination.last_page,
          onPageChange: handlePageChange,
        }}
        searchable
        exportable
        searchPlaceholder="Search accounts..."
        exportFileName="accounts"
        searchFields={["account_number", "name", "account_type"]}
        actionButtons={
          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
            <DialogTrigger asChild>
              <Button>
                <Plus className="h-4 w-4 mr-2" />
                Add Account
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[600px]">
              <DialogHeader>
                <DialogTitle>Create New Customer Account</DialogTitle>
                <DialogDescription>
                  Create a complete customer setup (User + Customer + Account).
                </DialogDescription>
              </DialogHeader>
              <div className="grid gap-4 py-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="grid gap-2">
                    <Label htmlFor="username">Username</Label>
                    <Input
                      id="username"
                      value={formData.username}
                      onChange={(e) => handleUsernameChange(e.target.value)}
                      placeholder="Enter username"
                    />
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="email">Email</Label>
                    <Input
                      id="email"
                      type="email"
                      value={formData.email}
                      onChange={(e) =>
                        setFormData({ ...formData, email: e.target.value })
                      }
                      placeholder="Enter email"
                    />
                  </div>
                </div>
                <div className="grid gap-2">
                  <Label htmlFor="phone">Phone</Label>
                  <Input
                    id="phone"
                    value={formData.phone}
                    onChange={(e) =>
                      setFormData({ ...formData, phone: e.target.value })
                    }
                    placeholder="Enter phone number"
                  />
                </div>
                <div className="grid gap-2">
                  <Label htmlFor="customer_type">Customer Type</Label>
                  <Select
                    value={formData.customer_type}
                    onValueChange={(value: "individual" | "corporate") =>
                      setFormData({ ...formData, customer_type: value })
                    }
                  >
                    <SelectTrigger className="w-full">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="individual">Individual</SelectItem>
                      <SelectItem value="corporate">Corporate</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div className="grid gap-2">
                    <Label htmlFor="account_type">Account Type</Label>
                    <Select
                      value={formData.account_type}
                      onValueChange={(value: "prepaid" | "postpaid") =>
                        setFormData({ ...formData, account_type: value })
                      }
                    >
                      <SelectTrigger className="w-full">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="prepaid">Prepaid</SelectItem>
                        <SelectItem value="postpaid">Postpaid</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="initial_balance">Initial Balance</Label>
                    <Input
                      id="initial_balance"
                      type="number"
                      step="0.01"
                      value={formData.initial_balance}
                      onChange={(e) =>
                        setFormData({ ...formData, initial_balance: parseFloat(e.target.value) || 0 })
                      }
                      placeholder="0.00"
                    />
                  </div>
                </div>
                {formData.account_type === "postpaid" && (
                  <div className="grid gap-2">
                    <Label htmlFor="credit_limit">Credit Limit</Label>
                    <Input
                      id="credit_limit"
                      type="number"
                      step="0.01"
                      value={formData.credit_limit}
                      onChange={(e) =>
                        setFormData({ ...formData, credit_limit: parseFloat(e.target.value) || 0 })
                      }
                      placeholder="0.00"
                    />
                  </div>
                )}
              </div>
              <DialogFooter>
                <Button
                  variant="outline"
                  onClick={() => setIsCreateDialogOpen(false)}
                >
                  Cancel
                </Button>
                <Button onClick={handleCreateAccount}>Create Account</Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        }
      />

      {/* Edit Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>Edit Customer Account</DialogTitle>
            <DialogDescription>
              Update customer account information and settings.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="grid gap-2">
                <Label htmlFor="edit_username">Username</Label>
                <Input
                  id="edit_username"
                  value={formData.username}
                  onChange={(e) =>
                    setFormData({ ...formData, username: e.target.value })
                  }
                  placeholder="Enter username"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit_email">Email</Label>
                <Input
                  id="edit_email"
                  type="email"
                  value={formData.email}
                  onChange={(e) =>
                    setFormData({ ...formData, email: e.target.value })
                  }
                  placeholder="Enter email"
                />
              </div>
            </div>
            <div className="grid gap-2">
              <Label htmlFor="edit_phone">Phone</Label>
              <Input
                id="edit_phone"
                value={formData.phone}
                onChange={(e) =>
                  setFormData({ ...formData, phone: e.target.value })
                }
                placeholder="Enter phone number"
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="edit_customer_type">Customer Type</Label>
              <Select
                value={formData.customer_type}
                onValueChange={(value: "individual" | "corporate") =>
                  setFormData({ ...formData, customer_type: value })
                }
              >
                <SelectTrigger className="w-full">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="individual">Individual</SelectItem>
                  <SelectItem value="corporate">Corporate</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="grid gap-2">
              <Label htmlFor="edit_account_number">Account Number</Label>
              <Input
                id="edit_account_number"
                value={formData.account_number}
                onChange={(e) =>
                  setFormData({ ...formData, account_number: e.target.value })
                }
                placeholder="Enter account number"
                disabled
              />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div className="grid gap-2">
                <Label htmlFor="edit_account_type">Account Type</Label>
                <Select
                  value={formData.account_type}
                  onValueChange={(value: "prepaid" | "postpaid") =>
                    setFormData({ ...formData, account_type: value })
                  }
                >
                  <SelectTrigger className="w-full">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="prepaid">Prepaid</SelectItem>
                    <SelectItem value="postpaid">Postpaid</SelectItem>
                  </SelectContent>
                </Select>
              </div>
                  <div className="grid gap-2">
                    <Label htmlFor="edit_balance">Balance</Label>
                    <Input
                      id="edit_balance"
                      type="number"
                      step="0.01"
                      value={formData.initial_balance}
                      onChange={(e) =>
                        setFormData({ ...formData, initial_balance: parseFloat(e.target.value) || 0 })
                      }
                      placeholder="0.00"
                    />
                  </div>
            </div>
            {formData.account_type === "postpaid" && (
              <div className="grid gap-2">
                <Label htmlFor="edit_credit_limit">Credit Limit</Label>
                <Input
                  id="edit_credit_limit"
                  type="number"
                  step="0.01"
                  value={formData.credit_limit}
                  onChange={(e) =>
                    setFormData({ ...formData, credit_limit: parseFloat(e.target.value) || 0 })
                  }
                  placeholder="0.00"
                />
              </div>
            )}
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setIsEditDialogOpen(false)}
            >
              Cancel
            </Button>
            <Button onClick={handleEditAccount}>Update Account</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>


      {/* Vehicle Management Dialog */}
      <Dialog open={isVehicleDialogOpen} onOpenChange={setIsVehicleDialogOpen}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>Manage Vehicles</DialogTitle>
            <DialogDescription>
              Add or remove vehicles for this customer account.
            </DialogDescription>
          </DialogHeader>
          
          {selectedVehicleAccount && (
            <div className="space-y-4">
              {/* Current Vehicles */}
              <div>
                <h4 className="font-medium mb-2">Current Vehicles</h4>
                <div className="space-y-2">
                  {selectedVehicleAccount.account_vehicles?.map((accountVehicle: any) => (
                    <div key={accountVehicle.id} className="flex items-center justify-between p-3 border rounded-lg">
                      <div>
                        <div className="font-medium">
                          {accountVehicle.vehicle?.plate_number}
                        </div>
                        <div className="text-sm text-muted-foreground">
                          {accountVehicle.vehicle?.make} {accountVehicle.vehicle?.model} ({accountVehicle.vehicle?.year})
                        </div>
                        {accountVehicle.is_primary && (
                          <Badge variant="default" className="mt-1">Primary</Badge>
                        )}
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleRemoveVehicle(selectedVehicleAccount.id, accountVehicle.vehicle_id)}
                        className="text-destructive hover:text-destructive"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  ))}
                  {(!selectedVehicleAccount.account_vehicles || selectedVehicleAccount.account_vehicles.length === 0) && (
                    <div className="text-center text-muted-foreground py-4">
                      No vehicles associated with this account
                    </div>
                  )}
                </div>
              </div>

              {/* Add New Vehicle */}
              <div className="border-t pt-4">
                <h4 className="font-medium mb-2">Add New Vehicle</h4>
                <div className="grid gap-4">
                  <div className="grid gap-2">
                    <Label htmlFor="vehicle_id">Select Vehicle</Label>
                    <Select
                      value={vehicleFormData.vehicle_id.toString()}
                      onValueChange={(value) =>
                        setVehicleFormData({ ...vehicleFormData, vehicle_id: parseInt(value) })
                      }
                    >
                      <SelectTrigger className="w-full">
                        <SelectValue placeholder="Select a vehicle" />
                      </SelectTrigger>
                      <SelectContent>
                        {vehicles.map((vehicle: any) => (
                          <SelectItem key={vehicle.id} value={vehicle.id.toString()}>
                            {vehicle.plate_number} - {vehicle.make} {vehicle.model} ({vehicle.year})
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="is_primary"
                      checked={vehicleFormData.is_primary}
                      onChange={(e) =>
                        setVehicleFormData({ ...vehicleFormData, is_primary: e.target.checked })
                      }
                    />
                    <Label htmlFor="is_primary">Set as primary vehicle</Label>
                  </div>
                  <Button onClick={handleAddVehicle} disabled={vehicleFormData.vehicle_id === 0}>
                    Add Vehicle
                  </Button>
                </div>
              </div>
            </div>
          )}
          
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setIsVehicleDialogOpen(false)}
            >
              Close
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}